function iota_deg = GeometricIota(hughes_iota_deg, a, e, p, tol)%% iota_deg = GeometricIota(hughes_iota_deg, a, e, p, tol)%% Determines geometricly-defined iota given Hughes' definition %%    cos (iota_hughes) = L / srt(L^2 + Q)%% and given a, e, p.  The output is iota, in degrees, to a fractional accuracy given% by tol > 1e-12.%% NOTE: requires that the routine ELzQ() is in the same directory (or in matlab's path).%% Steve Drasco% 3 July 2008%% quit for unreasonable tolleranceif tol < 1e-12  error('GetIota() requires tol > 1e-12');end % define the function who's root we wantdiota = @(guess_iota_deg) (HughesIota(guess_iota_deg, a, e, p) - hughes_iota_deg) / hughes_iota_deg;%below is just a guess at a fix%diota = @(guess_iota_deg) (HughesIota(guess_iota_deg, a, e, p) - hughes_iota_deg) / (1.e-6+ hughes_iota_deg);% find the rootoptions = optimset('TolX', tol);iota_deg = fzero(diota, hughes_iota_deg, options); 