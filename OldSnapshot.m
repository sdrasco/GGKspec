function [H,EInf, EH, LInf, LH] = OldSnapshot(filename,t)
%
% SNAPSHOT generate a gravitational-wave snapshot of Extreme Mass Ratio Inspirals.
%
%  [H,EInf, EH, LInf, LH] = snapshot(filename,t)
%
% INPUTS
%
%  filename: This is a string version of the location for the input file.
%            Input files, generated by code writen by Steve Drasco and Scott Hughes,
%            can be found at http://baba.astro.cornell.edu/snapshots/
%            The code used to generate those files is described in gr-qc/0509101 .
%
%  t: An array of retarded-times (in units of the large black hole's mass M) at 
%     which the waveform will be returned.
%
% OUTPUTS
%
%  H: A matrix with four columns [H90 H60 H30 H0]. Each column 
%     contains the dimensionless waveform (h_+ - i h_x)*(r/M) as a function of 
%     retarded-time t. The number following H in the column is the theta-position of 
%     the observer in Boyer Lindquist coordinates.  
%
%  EInf: Energy flux at spatial-infinity <dE/dt>^\infty 
%
%  EH: Energy flux at the horizon <dE/dt>^H 
%
%  LInf: Axial-angular momentum flux at spatial-infinity <dL_z/dt>^\infty 
% 
%  LH: Axial-angular momentum flux at the horizon <dL_z/dt>^H 
%
% EXAMPLE
%
%  To turn the data in a file called AlreadyDownloaded.dat into 
%  an h_+ waveform as seen by an observer on the z-axis, at 1000 intervals
%  of time each of length M, do the following:
%
%  >> filename = 'AlreadyDownloaded.dat';
%  >> t = linspace(0,1000,1000);
%  >> [H,EInf, EH, LInf, LH] = snapshot(filename,t);
%  >> plot(t,real(H(:,1)))
%
% Instead, you can create and dump this waveform into a file called "OutFile"
% by doing this:
%
%  >> fid = fopen('OutFile','w');
%  >> for i=1:length(t);  fprintf( fid,'%e  %e  %e  \n',t(i), real(H(i,1)), -imag(H(i,1)) ); end
%  >> fclose(fid);
%
%The first column of OutFile will be t, the second column of OutFile will be h_+, and 
% the third column will be h_x.
%
%
% by Steve Drasco, sdrasco@jpl.nasa.gov, 10 December 2005
%


% load data and compute fluxes
D = load(filename);
w = D(:,5);
ZH = D(:,6) + i*D(:,7);
S90 = D(:,11);
S60 = D(:,12);
S30 = D(:,13);
S0 = D(:,14);
EInf = sum(D(:,15));
EH = sum(D(:,16));
LInf = sum(D(:,17));
LH = sum(D(:,18));
clear D;

% compute waveforms
H = 0;
E = [];
Lz = [];
for j=1:length(w)

  % H
  expfactor = exp( -i*w(j)*t ) / ( w(j)*w(j) );
  H90 = - ZH(j) * S90(j) * expfactor;
  H60 = - ZH(j) * S60(j) * expfactor;
  H30 = - ZH(j) * S30(j) * expfactor;
  H0  = - ZH(j) * S0(j)  * expfactor;
  Hj = [H90(:) H60(:) H30(:) H0(:)];
  H = H + Hj;

end
H = 2*H;